[
  {
    "objectID": "index.html#objetivos-del-proyecto",
    "href": "index.html#objetivos-del-proyecto",
    "title": "Modelamiento del Riesgo de Crédito mediante Redes Neuronales Artificiales",
    "section": "2.1 Objetivos del proyecto",
    "text": "2.1 Objetivos del proyecto\nCon el desarrollo del proyecto se debe cumplir con los siguientes objetivos:\n\nEl modelo clasifica satisfactoriamente a un cliente como malo o no malo.\nEl modelo es relevante y práctico en el contexto económico colombiano.\nEl modelo utiliza información relevante y de fácil acceso para el usuario.\nIdentificar las variables más relevantes en el comportamiento crediticio."
  },
  {
    "objectID": "index.html#limitaciones",
    "href": "index.html#limitaciones",
    "title": "Modelamiento del Riesgo de Crédito mediante Redes Neuronales Artificiales",
    "section": "2.2 Limitaciones",
    "text": "2.2 Limitaciones\nPara el desarrollo de este proyecto se van determinar unas limitaciones en cuanto a lo que se va a realizar para el procesamiento de los datos y diseño del modelo, estas son:\n\nNo se van a realizar procesos de procesamiento de lenguaje natural, ya que esto va más allá de los conocimientos compartidos en el curso hasta este punto. Esto implica que variables como desc no seran consideradas para la construcción del modelo.\nNo se van a tomar en cuenta variables con información geográfica. A pesar de que estas pueden aportar información valiosa es de crucial importancia mantener la utilidad y prácticidad del modelo. Dado que el dataset utilizado fue recopilado en EE. UU. esta información sería irrelevante para el contexto económico de Colombia.\nSolo se van a considerar créditos individuales, por lo que los registros correspondientes a creditos conjuntos serán descartados.\nNo se van a utilzar variables que indiquen fechas ya que no se conoce el tiempo desde que fueron recopilados los datos. Esta información no tendría ningun valor para la construcción del modelo."
  },
  {
    "objectID": "index.html#fases-de-desarrollo",
    "href": "index.html#fases-de-desarrollo",
    "title": "Modelamiento del Riesgo de Crédito mediante Redes Neuronales Artificiales",
    "section": "2.3 Fases de desarrollo",
    "text": "2.3 Fases de desarrollo\nSe definen las siguientes fases de desarrollo del modelo:\n\nDefinición de metodología del proyecto.\nAnálisis exploratorio de los datos.\nDefinición de variable objetivo e hipótesis.\nConstrucción y optimización del modelo.\nConstrucción de árbol de decisión como modelo de baja complejidad de referencia.\nCreación de scorecard.\nListado de aprendizajes.\nPlanteamiento de caso de uso del modelo.\nRedacción de reporte técnico.\nDesarrollo de aplicación web.\nCreación de video publicitario.\n\nEs importante mencionar que no todas las fases de desarrollo serán llevadas a cabo de manera sequencial o en orden como el desarrollo de la aplicación web que será paralelo al desarrollo del modelo."
  },
  {
    "objectID": "index.html#construcción",
    "href": "index.html#construcción",
    "title": "Modelamiento del Riesgo de Crédito mediante Redes Neuronales Artificiales",
    "section": "4.1 Construcción",
    "text": "4.1 Construcción\nClase NN (Red Neuronal) La clase NN representa la arquitectura del modelo de red neuronal utilizado para la clasificación binaria. Fue implementada mediante PyTorch (nn.Module) y su propósito es modelar relaciones no lineales entre las variables predictoras y la probabilidad de incumplimiento de un préstamo.\n\nEstructura del modelo:\n\nCapa 1: Linear(input_size, 512) – capa totalmente conectada con función de activación ReLU.\nDropout: Se aplica una capa de regularización con probabilidad configurable (ej. 0.3) para prevenir sobreajuste.\nCapa de salida: Linear(512, 1) – salida lineal que se conecta a una función de pérdida sigmoide implícita (via BCEWithLogitsLoss).\nMétodo forward: Define el flujo de datos a través de la red, aplicando la activación y el dropout entre capas.\n\n\nEsta clase es flexible y permite ajustar la arquitectura fácilmente modificando el número de neuronas o capas.\nClase Trainer La clase Trainer encapsula todo el proceso de entrenamiento, validación y evaluación del modelo. Fue diseñada para separar la lógica del entrenamiento del resto del flujo del proyecto, facilitando la reproducibilidad y modularidad.\n\nConstructor (init):\n\nRecibe el modelo, los datos ya particionados (entrenamiento, validación, prueba), pesos de clase y rutas para guardar artefactos.\nAplica estandarización (con StandardScaler) si se utiliza entrenamiento completo.\n\nMétodo create_dataloaders:\n\nConvierte los conjuntos de datos en objetos DataLoader para entrenamiento por lotes.\n\nMétodo train:\n\nEjecuta el entrenamiento en múltiples épocas.\nUtiliza la función de pérdida BCEWithLogitsLoss con ponderación de clases para manejar el desbalance.\nEmplea ReduceLROnPlateau para ajustar la tasa de aprendizaje automáticamente.\nImplementa early stopping basado en la pérdida de validación.\nGuarda automáticamente el mejor modelo en disco (en la carpeta Models/).\n\nMétodo evaluate:\n\nCalcula predicciones en el conjunto de prueba y reporta métricas como accuracy, F1, recall, y balanced accuracy.\nGuarda los resultados en archivos .json para análisis posterior."
  },
  {
    "objectID": "index.html#optimización",
    "href": "index.html#optimización",
    "title": "Modelamiento del Riesgo de Crédito mediante Redes Neuronales Artificiales",
    "section": "4.2 Optimización",
    "text": "4.2 Optimización\nPara tener un punto de referencia se entrenó un modelo con todas las variables disponibles para luego compararse con un número de variables razonable para un usuario que está llenando un formulario y tiene tiempo e información limitada.\n\n4.2.1 Modelo Completo\n\n\n\n\n\n\n\n\n\n\n\n4.2.2 Modelo Reducido\nPara la definición de este modelo se utilizaron las siguientes variables\n\n\n\n\n\n\n\nVariable\nDescripción\n\n\n\n\nint_rate\nTasa de interés del préstamo\n\n\nterm_ 60 months\nDuración del préstamo en meses (60 meses)\n\n\ndti\nRelación deuda-ingreso del solicitante\n\n\nverification_status_Source Verified\nVerificación del ingreso por la fuente original\n\n\nrevol_util\nUtilización del crédito renovable (%)\n\n\ninstallment\nCuota mensual del préstamo\n\n\nhome_ownership\nTipo de tenencia de la vivienda (alquilada, propia, hipotecada)\n\n\nsub_grade\nSubcategoría de riesgo crediticio asignada al préstamo\n\n\npurpose\nPropósito declarado del préstamo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2.3 Modelo Reducido para Recall\nCon estas mismas variables se entrenó un segundo modelo cuyo objetivo es máximizar la metrica recall para la clase 1. Esto se logró modificando el peso que recibe la función nn.BCEWithLogitsLoss.\nEste cambio se realizo con el objetivo de minimizar el número de clientes “malos” que puedan ser categorizados como clientes “no malos”. Esto es crucial para instituciones prestadoras, puesto que realizar prestamos a clientes con un pérfil de riesgo peligroso puede representar una perdida asegurada.\n\n\n\n\n\n\n\n\n\nEste es el modelo que se va a utilizar en el despliegue de la página.\n\n4.2.3.0.1 Importancia de las Variables\nSe utilizó la técnica Feature Importance via Permutation para analizar la incidencia de cada una de las variables en el resultado final del modelo\n\nPara la métrica objetivo recall se obtiene que la caracteristica más importante es el subgrado A2 y es bastante claro que la variabe subgrade tuvo un gran efecto en el entrenamiento del modelo."
  },
  {
    "objectID": "index.html#interpretación-de-árboles-de-decisión-y-comparación-con-redes-neuronales",
    "href": "index.html#interpretación-de-árboles-de-decisión-y-comparación-con-redes-neuronales",
    "title": "Modelamiento del Riesgo de Crédito mediante Redes Neuronales Artificiales",
    "section": "5.1 Interpretación de Árboles de Decisión y Comparación con Redes Neuronales",
    "text": "5.1 Interpretación de Árboles de Decisión y Comparación con Redes Neuronales\nEl árbol de decisión divide el conjunto de datos en ramas, tomando decisiones binarias en cada nodo interno según una variable.\nEn nuestro caso, una de esas variables clave es la tasa de interés (int_rate).\nEl árbol decide qué variable usar para dividir en cada nodo con base en una medida de impureza, la cual evalúa qué tan puras son las divisiones.\nUn nodo es considerado puro cuando contiene observaciones de una sola clase.\nEste tipo de modelo permite detectar relaciones no lineales y combinaciones de condiciones.\nPor ejemplo:\n\nLas personas con tasa de interés alta (int_rate) y bajo ingreso (annual_inc) podrían tener mayor riesgo de incumplimiento.\n\nEstas condiciones no se interpretan de forma aislada, sino conjuntamente.\nA continuación, se presenta una comparación entre árboles de decisión y redes neuronales:\n\n\n\n\n\n\n\n\nAspecto\nÁrbol de decisión\nRed neuronal\n\n\n\n\nInterpretabilidad\nAlta\nBaja\n\n\nComplejidad de patrones\nBaja-Media\nAlta\n\n\nRequiere escalado\nNo\nSí\n\n\nDatos desbalanceados\nAfectan mucho\nSe puede mitigar con técnicas adicionales\n\n\nTiempo de entrenamiento\nRápido\nPuede ser más lento"
  },
  {
    "objectID": "index.html#aprendizajes-del-proyecto",
    "href": "index.html#aprendizajes-del-proyecto",
    "title": "Modelamiento del Riesgo de Crédito mediante Redes Neuronales Artificiales",
    "section": "7.1 Aprendizajes del Proyecto",
    "text": "7.1 Aprendizajes del Proyecto\nImportancia de la limpieza de datos\nEl proceso de depuración de variables y registros irrelevantes fue esencial para garantizar que el modelo se entrene sobre información útil y no contaminada, evitando fenómenos como el data leakage.\nBalance entre desempeño y simplicidad\nSe comprobó que es posible construir modelos con un número reducido de variables que mantengan un desempeño competitivo. Esto es crucial para facilitar la implementación práctica en escenarios donde el input del usuario es limitado.\nImpacto del desbalance de clases\nLa necesidad de ajustar los pesos en la función de pérdida para mejorar métricas como el recall evidencia cómo un desbalance puede afectar fuertemente los resultados del modelo y la toma de decisiones.\nEl valor del análisis exploratorio profundo\nUn análisis exploratorio riguroso permitió tomar decisiones informadas sobre imputación de valores nulos, codificación de variables y selección de características.\nVentajas de modularizar el código\nDiseñar clases como NN y Trainer permitió mantener el código organizado, reutilizable y fácilmente ajustable durante las fases de prueba y optimización.\nImportancia de métricas múltiples\nMás allá del accuracy, métricas como f1-score, recall y balanced accuracy permiten una evaluación más precisa del modelo, especialmente en contextos con clases desbalanceadas y contextos especificos como lo son las decisiones para entidades bancarias.\nLimitaciones contextuales del dataset\nSe reconoció que ciertos datos, como los geográficos o financieros específicos de EE. UU., no son directamente aplicables al contexto colombiano y deben ser descartados para mantener la relevancia.\nInterpretabilidad mediante scorecard\nLa construcción de una scorecard permitió transformar las salidas del modelo en puntajes interpretables para usuarios no técnicos. Esta herramienta facilita la comunicación del nivel de riesgo asociado a un solicitante de crédito. Además, la distribución de los puntajes permitió observar que la mayoría de los individuos se agrupan en el rango medio de riesgo, lo cual puede ser útil para definir umbrales de decisión personalizados."
  }
]